# dynatrace oneagent install on linux
# hosts_group -> inventory group of hosts to execute playbook on
# dt_api_endpoint -> dynatrace environment api endpoint (include trailing /)
# dt_api_token -> dynatrace api install token
# dt_host_group -> dynatrace host group name
# dt_app_log_content_access -> flag to enable or disable log analytics on host (0 or 1)
# dt_infra_only -> flag to set cloud infrastructure monitoring mode on host (0 or 1)
---
-
  hosts: "{{ hosts_group }}"
  name: "dynatrace oneagent install on linux"
  tasks:
    -
      name: "validate ansible tower execution on linux with sudo access"
      shell:
        cmd: ls /opt
      become: yes
    -
      name: "check if oneagent is already installed"
      stat:
        path: /opt/dynatrace/oneagent/agent/lib64/liboneagentos.so
      register: installed
    -
      name: "download oneagent install file"
      get_url: 
         # on the target systems, ensure that python is compiled with SSL support
         # python -c "import ssl; print(ssl.OPENSSL_VERSION)"
         # urlk#https://eyexxxx.live.dynatrace.com/api/v1/deployment/installer/agent/unix/default/latest?arch=x86&flavor=default" --header="Authorization: Api-Token llllll"
         url: "{{ dt_api_endpoint }}deployment/installer/agent/unix/default/latest?arch=x86&flavor=default"
         headers: "Authorization: Api-Token {{ dt_api_token }} "
         dest: /tmp/dynatrace-oneagent-linux-latest.sh
         mode: '0777'
         #validate_certs: false
    -
      name: "install: execute oneagent install file with root privileges"
      shell: "sh /tmp/dynatrace-oneagent-linux-latest.sh HOST_GROUP={{ dt_host_group }} APP_LOG_CONTENT_ACCESS={{ dt_app_log_content_access }}{% if dt_infra_only is defined %} INFRA_ONLY={{ dt_infra_only }}{% endif %}"
      become: yes
      when: ansible_architecture != "armv7l" and installed.stat.exists == False
    -
      name: "update: execute oneagent install file with root privileges"
      shell: "sh /tmp/dynatrace-oneagent-linux-latest.sh HOST_GROUP={{ dt_host_group }} APP_LOG_CONTENT_ACCESS={{ dt_app_log_content_access }}{% if dt_infra_only is defined %} INFRA_ONLY={{ dt_infra_only }}{% endif %}"
      become: yes
      when: ansible_architecture != "armv7l" and installed.stat.exists == True
