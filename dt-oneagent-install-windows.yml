# dynatrace oneagent install on windows
# hosts_group -> inventory group of hosts to execute playbook on
# dt_api_endpoint -> dynatrace environment api endpoint (include trailing /)
# dt_api_token -> dynatrace api install token
# dt_host_group: -> dynatrace host group name
# dt_app_log_content_access: -> flag to enable or disable log analytics on host (0 or 1)
# dt_infra_only: -> flag to set cloud infrastructure monitoring mode on host (0 or 1)
---
-
  hosts: "{{ hosts_group }}"
  name: "dynatrace oneagent install on windows"
  tasks:
    # Check the OS architecture bitness
    -
      name: "check OS architecture"
      debug:
        var: ansible_architecture
      when: ansible_architecture is defined
    # Check that Temp directory exists
    -
      name: "check that Temp directory exists"
      win_file:
        path: C:\Temp
        state: directory
      changed_when: False
    # Check the latest available OneAgent version
    -
      name: "get latest oneagent version from dynatrace environment api"
      local_action:
        module: uri
        url: "{{ dt_api_endpoint }}deployment/installer/agent/unix/default/latest/metainfo?flavor=default&arch=all&bitness=all"
        headers:
          accept: application/json
          Authorization: Api-Token {{ dt_api_token }}
      register: latest_version
    -
      name: "set oneagent latest version fact (dt_latest_version)"
      set_fact:
        dt_latest_version: "{{ latest_version.json.latestAgentVersion }}"
      when: latest_version is defined
    # Check if OneAgent is already installed, if yes then check installed version
    -
      name: "check if oneagent is already installed via windows service registry key"
      win_reg_stat:
        path: HKLM:\SYSTEM\CurrentControlSet\Services\Dynatrace OneAgent
        name: DisplayName
      register: installed
    -
      name: "check current agent version"
      win_shell: .\oneagentctl --version
      args:
        chdir: C:\Program Files (x86)\dynatrace\oneagent\agent\tools\
      register: current_version
      when: installed.exists == True
      changed_when: False
    -
      name: "set oneagent current version fact (dt_current_version)"
      set_fact:
        dt_current_version: "{{lookup('flattened', current_version.stdout_lines)}}"
      when: installed.exists == True and current_version is defined
    -
      name: "debug output current version"
      debug:
        var: dt_current_version
      when: installed.exists == True and current_version is defined
    -
      name: "debug output latest version"
      debug:
        var: dt_latest_version
      when: dt_latest_version is defined
    # Download OneAgent install file if installation or upgrade is required
    -
      name: "download oneagent install file"
      win_get_url:
        url: "{{ dt_api_endpoint }}deployment/installer/agent/windows/default/latest?arch=x86&flavor=default"
        dest: C:\Temp\dynatrace-oneagent-windows-latest.exe
        headers:
          Authorization: Api-Token {{ dt_api_token }}
      when: installed.exists != True or dt_current_version != dt_latest_version
      changed_when: False
    # Install OneAgent
    -
      name: "install: execute oneagent install file"
      win_package:
        #product_id: "{{ dt_product_id }}"
        product_id: "{65E3C889-BF02-4A22-9E22-5DCA88789582}" ## Dummy Product ID
        path: C:\Temp\dynatrace-oneagent-windows-latest.exe
        arguments:
        - HOST_GROUP="{{ dt_host_group }}"
        - APP_LOG_CONTENT_ACCESS="{{ dt_app_log_content_access }}"
        - INFRA_ONLY="{{ dt_infra_only }}"
        state: present
      when: installed.exists == False
    # Update OneAgent
    -
      name: "update: oneagent update block"
      block:
        -
          name: "update: execute oneagent install file"
          win_package:
            #product_id: "{{ dt_product_id }}"
            product_id: "{65E3C889-BF02-4A22-9E22-5DCA88789582}" ## Dummy Product ID
            path: C:\Temp\dynatrace-oneagent-windows-latest.exe
            arguments:
            - HOST_GROUP="{{ dt_host_group }}"
            - APP_LOG_CONTENT_ACCESS="{{ dt_app_log_content_access }}"
            - INFRA_ONLY="{{ dt_infra_only }}"
            state: present
      when: installed.exists == True and dt_current_version != dt_latest_version
    # Validate OneAgent is installed
    -
      name: "validate oneagent installation via windows service registry key"
      win_reg_stat:
        path: HKLM:\SYSTEM\CurrentControlSet\Services\Dynatrace OneAgent
        name: DisplayName
      register: installed
      failed_when: installed.exists == False
    # Check that the Host Group is correct, if not then correct it
    -
      name: "get current host group setting"
      win_shell: .\oneagentctl --get-host-group
      args:
        chdir: C:\Program Files (x86)\dynatrace\oneagent\agent\tools\
      register: current_host_group
      when: ansible_architecture == "64-bit"
      changed_when: False
    -
      name: "get current host group setting"
      win_shell: .\oneagentctl --get-host-group
      args:
        chdir: C:\Program Files\dynatrace\oneagent\agent\tools\
      register: current_host_group
      when: ansible_architecture == "32-bit"
      changed_when: False
    -
      name: "set current host group fact (dt_current_host_group)"
      set_fact:
        dt_current_host_group: "{{lookup('flattened', current_host_group.stdout_lines)}}"
      when: current_host_group is defined
    -
      name: "update/correct host group setting if not correct"
      win_shell: |
        net stop "Dynatrace OneAgent"
        .\oneagentctl --set-host-group={{ dt_host_group }}
        net start "Dynatrace OneAgent"
      args:
        chdir: C:\Program Files\dynatrace\oneagent\agent\tools\
      when: dt_current_host_group != dt_host_group and dt_host_group is defined and dt_current_host_group is defined and ansible_architecture == "32-bit"
    -
      name: "update/correct host group setting if not correct"
      win_shell: |
        net stop "Dynatrace OneAgent"
        .\oneagentctl --set-host-group={{ dt_host_group }}
        net start "Dynatrace OneAgent"
      args:
        chdir: C:\Program Files (x86)\dynatrace\oneagent\agent\tools\
      when: dt_current_host_group != dt_host_group and dt_host_group is defined and dt_current_host_group is defined and ansible_architecture == "64-bit"
